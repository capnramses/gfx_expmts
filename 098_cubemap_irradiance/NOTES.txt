Diffuse Irradiance
- cubemaps used for lighting in PBR are pre-computed because an integral needs to be solved by convolution
- this lets us represent the full hemisphere of angles of radiance
- they assume the centre of the cube is the surface being lit, which doesn't work well for things spread throughout an interior environment
- to improve this several cubes can be generated - i.e. 'reflection probes' are placed about the room
- i believe engines must compile these as part of a scene build process, rather than have them re-evaluate at run-time
- to represent a range light energy properly we need values outside 0-1 and .: an HDR encoding of the image.

HDR map and equirectangular faffery
- .hdr radiance file formats store a full cubemap in one "equirectangular" image of floats (its a sphere projected onto a rectangle).
  (8 bits per channel + exponent in alpha). requires parsing into floats on read.
  examples here http://www.hdrlabs.com/sibl/archive.html
  stb_image.h can load HDR via stbi_loadf() in 32-bit float 3 channel.
  load as a GL_TEXTURE_2D but format GL_RGB16F, GL_RGB, FL_FLOAT --> why not 32F ?
- it's still a rectangle after loading
- need a pre-pass to create a cube by projecting it
THIS SEEMS LIKE A VERY UNNECESSARY EXTRA STEP -> make a program to do this separately or don't use these equirectangular images

Note to self
-> i think an example of building our own reflection probe cube would be more interesting that using an external hdr thing
-> could actually write equirectangular maps if we wanted to using the same formula as smapling them:

  inv_atan = vec2( 0.1591, 0.3183 );
  uv = vec2( atan( v.z, v.x ), asin( v.y ) ) * inv_atan + 0.5;

Convolution around a hemisphere ( full y-rot of 0-360 in little dϕ stepeens with a up-down rot of 0-90 degrees in dθ stepeens /at each y-rot stepeen/ )
Lo(p,ϕo,θo) = kdc/π ∫2π,ϕ=0 ∫1/2π,θ=0 Li(p,ϕi,θi)cos(θ)sin(θ)dϕdθ
Riemann sum translates to discrete integral:
Lo(p,ϕo,θo)=k_d * (cπ)/(n1*n2) ∑ϕ=0n1 ∑θ=0n2 Li(p,ϕi,θi)cos(θ)sin(θ)dϕdθ
* because sample areas get smaller near the top of a sphere we scale the equation by sin( theta )

GLSL from https://learnopengl.com/PBR/IBL/Diffuse-irradiance
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    vec3 irradiance   = vec3( 0.0 ); // L_o
    vec3 up           = vec3( 0.0, 1.0, 0.0 );
    vec3 right        = cross( up, normal );
    up                = cross( normal, right );
    float sampleDelta = 0.025;                                                                           // decrease delta to increase accuracy
    float nrSamples   = 0.0; 
    for( float phi = 0.0; phi < 2.0 * PI; phi += sampleDelta ) {                                         // y-rot
      for( float theta = 0.0; theta < 0.5 * PI; theta += sampleDelta ) {                                 // up-and-down quarter rot
        vec3 tangentSample = vec3( sin( theta ) * cos( phi ), sin( theta ) * sin( phi ), cos( theta ) ); // spherical to cartesian (in tangent space)
        vec3 sampleVec     = tangentSample.x * right + tangentSample.y * up + tangentSample.z * N;       // tangent space to world, oriented around normal
        // Scaled by cos( thea ) to compensate for weaker light at larger angles, and by sin( theta ) for smaller areas in higher hemisphere.
        irradiance        += texture( environmentMap, sampleVec ).rgb * cos( theta ) * sin( theta );     // L_i.
        nrSamples++;
      }
    }
    irradiance = PI * irradiance * ( 1.0 / float( nrSamples ) );                                         // average result by number of samples
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
NOTE - can store the result in 32x32 images and use linear filtering to help balance

-> replace ambient lighting constant with this IBL

Plan
- just load my regular cubemap as a background and not worry about HDR scales for now
- get a camera working
-> convolve the environment map to produce a blurry boi

-> if we generate these for the building with a white background behind windows/skylights we should get some neat lighting
